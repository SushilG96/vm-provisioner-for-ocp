# Expected vars:
#
# - 'config_filepath' - required. It is expected to be provided and must
# store filepath for the config file.
#
# Command to run only this playbook using control playbook:
#
# $ tox -e ocp3.11 -- ansible-playbook -i inventory-file.yaml \
#     control_playbook.yaml \
#     -e config_filepath=/path/to/the/config.yaml \
#     --tags cluster_info
#
# Command to run this playbook directly:
#
# $ tox -e ocp3.11 -- ansible-playbook -i inventory-file.yaml \
#     6_gather_cluster_info.yaml \
#     -e config_filepath=/path/to/the/config.yaml
---
# Ansible runner machine info
- hosts: localhost
  connection: local
  run_once: yes
  gather_facts: no
  tasks:
  - name: Read and validate config file
    dt_validate_vms_provisioning_config:
      path: "{{ config_filepath }}"
    register: config_output
  - name: Save config to a var
    set_fact:
      config: "{{ config_output.config }}"
  - name: DEBUG. Print parsed config file data
    debug:
      msg: "{{ config }}"
  - name: Add master nodes if not added yet
    add_host:
      name: "{{ item }}"
      groups: dt_masters
      ansible_user: root
    with_items: "{{ config.vmware.vm_parameters.masters.names }}"
    when:
    - "'dt_masters' not in groups"
  - name: Add compute nodes if not added yet
    add_host:
      name: "{{ item }}"
      groups: dt_nodes
      ansible_user: root
    with_items: "{{ config.vmware.vm_parameters.nodes.names }}"
    when:
    - "'dt_nodes' not in groups"
  - name: Add glusterfs nodes if not added yet
    add_host:
      name: "{{ item }}"
      groups: dt_glusterfs
      ansible_user: root
    with_items: "{{ config.vmware.vm_parameters.glusterfs.names }}"
    when:
    - "'dt_glusterfs' not in groups"
  - name: Add glusterfs_registry nodes if not added yet
    add_host:
      name: "{{ item }}"
      groups: dt_glusterfs_registry
      ansible_user: root
    with_items: "{{ config.vmware.vm_parameters.glusterfs_registry.names }}"
    when:
    - "'dt_glusterfs_registry' not in groups"

  - set_fact:
      data_file_path: "{{ config.common.output_cluster_info_file }}"
  - name: Print data file name
    debug:
      msg: "Data file path is '{{ data_file_path }}'"
  - name: "[Re]Create file where we are going to store gathered data"
    copy:
      content: ""
      dest: "{{ data_file_path }}"
      mode: 0644
      force: yes

  - name: Get Linux kernel version of ansible runner
    shell: "uname -a"
    register: ansible_runner_linux_kernel_version
  - name: Get Red Hat release info for ansible runner
    shell: "cat /etc/redhat-release"
    register: ansible_runner_rh_release
    ignore_errors: yes
  - name: Get ansible-playbook version from ansible runner
    shell: "{{ lookup('env', 'VIRTUAL_ENV') }}/bin/ansible-playbook --version |
            grep '^ansible-playbook' | awk '{print $2}'"
    register: ansible_runner_ansible_playbook_version
  - name: Get 'openshift-ansible' lib version used by ansible runner
    shell: "echo \"openshift-ansible-$(cat {{
               lookup('env', 'VIRTUAL_ENV')
            }}/usr/share/ansible/openshift-ansible/{{ ''
            }}.tito/packages/openshift-ansible | awk '{print $1}')\""
    register: ansible_runner_oc_lib_version
  - name: Write ansible runner data to the data file
    dt_yedit:
      src: "{{ data_file_path }}"
      state: present
      backup: false
      edits:
      - key: 01_ansible_runner
        value:
          Linux kernel version: "{{
            ansible_runner_linux_kernel_version.stdout_lines }}"
          Red Hat release info: "{{
              ansible_runner_rh_release.stdout_lines or
              'File /etc/redhat-release was not found. Not RHEL machine?' }}"
          ansible-playbook version: "{{
            ansible_runner_ansible_playbook_version.stdout_lines }}"
          openshift-ansible lib version: "{{
            ansible_runner_oc_lib_version.stdout_lines }}"

# === Master node info ===
- hosts: dt_masters
  run_once: yes
  gather_facts: no
  vars:
    master_package_list:
    - docker
    - heketi
    master_service_list:
    - docker
    - multipathd
    gluster_package_list:
    - gluster
    - heketi
    - targetcli
    - gluster-block
    - tcmu-runner
    - python-configshell
    - python-rtslib
    gluster_service_list:
    - glusterd
    - heketi
    - gluster-blockd
    - gluster-block-target
    - tcmu-runner
    - rpcbind
    heketi_pod_package_list:
    - gluster
    - heketi
    # NOTE(vponomar): we do not process list of Heketi POD services for 2 reasons:
    # 1) No requirement to get status of any of services on Heketi POD.
    # 2) 'systemctl' does not work on it.
  tasks:
  - name: Get distro version of ansible runner
    shell: "uname -a"
    register: master_linux_kernel_version
  - name: Get Red Hat release info for ansible runner
    shell: "cat /etc/redhat-release"
    register: master_rh_release
  - name: Create grep filter with all the packages we are interested in
    set_fact:
      package_filter: "{{ package_filter | default('grep') + ' -e ' + item }}"
    with_items: "{{ master_package_list }}"
  - name: Get list of installed packages we are interested in
    shell: "rpm -qa | {{ package_filter }}"
    register: master_packages
  - name: Get status of services on OCP Master node
    shell: "systemctl list-units {{ master_service_list | join('.service ') }}.service
            --type=service --all --no-pager --no-legend"
    register: master_services
  - name: Get OpenShift client version
    shell: "oc version | grep -e 'oc ' -e 'openshift' -e 'kube'"
    register: master_oc_version
  - name: Get list of OCP nodes
    shell: "oc get nodes"
    register: master_ocp_nodes
  - name: Get info about all the docker images used in OCP cluster
    shell: "oc get pods --all-namespaces
            -o=custom-columns=:.status.containerStatuses[*].image | grep -v -e '^$' | uniq"
    register: master_image_info
  - name: Write master data to the data file
    delegate_to: localhost
    dt_yedit:
      src: "{{ hostvars['localhost']['data_file_path'] }}"
      state: present
      edits:
      - key: 02_master
        value:
          Linux kernel version: "{{ master_linux_kernel_version.stdout_lines }}"
          Red Hat release info: "{{ master_rh_release.stdout_lines }}"
          List of Packages: "{{ master_packages.stdout_lines }}"
          List of services: "{{ master_services.stdout_lines }}"
          OC Version: "{{ master_oc_version.stdout_lines }}"
          OCP nodes: "{{ master_ocp_nodes.stdout_lines }}"
          Images info: "{{ master_image_info.stdout_lines }}"

  # Heketi POD
  - name: Get heketi POD
    shell: "oc get pods --all-namespaces -l heketi
                -o=custom-columns=:.metadata.name,:.metadata.namespace"
    register: heketi_pods
  - name: DEBUG HEKETI
    debug:
      msg: "{{ heketi_pods }}"
  - block:
    - name: Get storage release version from Heketi POD
      shell: "oc exec {{ (heketi_pods.stdout_lines[1].split(' ') | list)[0] }}
        --namespace {{ (heketi_pods.stdout_lines[1].split(' ') | list)[-1] }} --
        cat /etc/redhat-storage-release"
      register: heketi_pod_storage_release_version
    - name: Get info about packages on Heketi POD
      shell: "oc exec {{ (heketi_pods.stdout_lines[1].split(' ') | list)[0] }}
        --namespace {{ (heketi_pods.stdout_lines[1].split(' ') | list)[-1] }} --
        rpm -qa | grep -e {{ heketi_pod_package_list | join(' -e ') }}"
      register: heketi_pod_packages
    - name: Write Heketi data to the data file
      delegate_to: localhost
      dt_yedit:
        src: "{{ hostvars['localhost']['data_file_path'] }}"
        state: present
        edits:
        - key: 03_heketi_pod
          value:
            Storage release version: "{{
              heketi_pod_storage_release_version.stdout_lines }}"
            List of Packages: "{{ heketi_pod_packages.stdout_lines }}"
    when: "{{ ((heketi_pods.stdout_lines | join('')).strip() | length) > 0 }}"

  # Gluster PODs
  - name: Get list of Gluster PODs
    shell: "oc get pods --all-namespaces -l glusterfs-node
                -o=custom-columns=:.metadata.name,:.metadata.namespace"
    register: gluster_pods
  - name: DEBUG GLUSTER
    debug:
      msg: "{{ gluster_pods }}"
  - block:
    - name: Get storage release version from Gluster PODs
      shell: "oc exec {{ (item.split(' ') | list)[0] }}
                  --namespace {{ (item.split(' ') | list)[-1] }} --
                  cat /etc/redhat-storage-release"
      with_items: "{{ gluster_pods.stdout_lines[1:] }}"
      register: gluster_pod_storage_release_version_results
    - name: Process gluster PODs storage release versions results
      set_fact:
        gluster_pod_storage_release_version_processed: "{{
            gluster_pod_storage_release_version_processed | default({}) | combine(
                {(item.item.strip().split(' ')[0]): item.stdout_lines},
                recursive=True
            ) }}"
      with_items: "{{ gluster_pod_storage_release_version_results.results }}"
    - name: Get info about packages on Gluster PODs
      shell: "oc exec {{ (item.split(' ') | list)[0] }}
                  --namespace {{ (item.split(' ') | list)[-1] }} --
                  rpm -qa | grep -e {{ gluster_package_list | join(' -e ') }}"
      with_items: "{{ gluster_pods.stdout_lines[1:] }}"
      register: gluster_pod_package_list_results
    - name: Process gluster PODs package lists results
      set_fact:
        gluster_pod_package_list_processed: "{{
            gluster_pod_package_list_processed | default({}) | combine(
                {(item.item.strip().split(' ')[0]): item.stdout_lines},
                recursive=True
            ) }}"
      with_items: "{{ gluster_pod_package_list_results.results }}"
    - name: Get info about services on Gluster PODs
      shell: "oc exec {{ (item.split(' ') | list)[0] }}
        --namespace {{ (item.split(' ') | list)[-1] }} --
        systemctl list-units {{
          gluster_service_list | join('.service ') }}.service
        --type=service --all --no-pager --no-legend"
      with_items: "{{ gluster_pods.stdout_lines[1:] }}"
      register: gluster_pod_service_list_results
    - name: Process gluster PODs service lists results
      set_fact:
        gluster_pod_service_list_processed: "{{
            gluster_pod_service_list_processed | default({}) | combine(
                {(item.item.strip().split(' ')[0]): item.stdout_lines},
                recursive=True
            ) }}"
      with_items: "{{ gluster_pod_service_list_results.results }}"
    - name: Write Gluster PODs data to the data file
      delegate_to: localhost
      dt_yedit:
        src: "{{ hostvars['localhost']['data_file_path'] }}"
        state: present
        edits:
        - key: 04_gluster_pods
          value:
            Storage release version: "{{
              gluster_pod_storage_release_version_processed }}"
            List of Packages: "{{ gluster_pod_package_list_processed }}"
            List of Services: "{{ gluster_pod_service_list_processed }}"
    - name: Define var to distinguish deployment types
      set_fact:
        standalone_gluster: "no"
      delegate_to: localhost
      delegate_facts: yes
    when: "{{ ((gluster_pods.stdout_lines | join('')).strip() | length) > 0 }}"
  - name: Define var to distinguish deployment types
    set_fact:
      standalone_gluster: "yes"
    delegate_to: localhost
    delegate_facts: yes
    when: "{{ ((gluster_pods.stdout_lines | join('')).strip() | length) < 1 }}"

- hosts: dt_glusterfs, dt_glusterfs_registry
  gather_facts: no
  pre_tasks:
  - setup:
      filter: ansible_hostname
  vars:
    gluster_package_list:
    - gluster
    - heketi
    - targetcli
    - gluster-block
    - tcmu-runner
    - python-configshell
    - python-rtslib
    gluster_service_list:
    - glusterd
    - heketi
    - gluster-blockd
    - gluster-block-target
    - tcmu-runner
    - rpcbind
  tasks:
  - block:
    - name: Get RedHat release version from Gluster nodes
      shell: "cat /etc/redhat-release || echo 'Failed to read Red Hat release info'"
      register: gluster_redhat_release_version
    - name: Get storage release version from Gluster nodes
      shell: "cat /etc/redhat-storage-release ||
        echo 'Failed to read Red Hat storage release info'"
      register: gluster_storage_release_version
    - name: Get info about packages on Gluster node
      shell: "rpm -qa | grep -e {{ gluster_package_list | join(' -e ')
        }} || echo 'No requested packages found'"
      register: gluster_node_package_list
    - name: Get info about services on Gluster nodes
      shell: "systemctl list-units {{
        gluster_service_list | join('.service ') }}.service
        --type=service --all --no-pager --no-legend"
      register: gluster_node_service_list
    - name: Write Gluster nodes data to the data file
      delegate_to: localhost
      dt_yedit:
        src: "{{ hostvars['localhost']['data_file_path'] }}"
        state: present
        edits:
        - key: "04_gluster_nodes__{{ ansible_hostname }}"
          value:
            RedHat release version: "{{
              gluster_redhat_release_version.stdout }}"
            Storage release version: "{{
              gluster_storage_release_version.stdout }}"
            List of Packages: "{{ gluster_node_package_list.stdout_lines }}"
            List of Services: "{{ gluster_node_service_list.stdout_lines }}"
#    when: "hostvars['localhost'].standalone_gluster | bool"

- hosts: localhost
  connection: local
  run_once: yes
  gather_facts: no
  tasks:
  - shell: "cat {{ data_file_path }}"
    register: data_file_content
  - name: Print gathered data
    debug:
      msg: "{{ data_file_content.stdout_lines }}"

### VALIDATION ###

# Validate package, system and storage versions on Gluster nodes
- hosts: dt_glusterfs, dt_glusterfs_registry
  gather_facts: no
  pre_tasks:
  - setup:
      filter: ansible_hostname
  tasks:
  - set_fact:
      validation_config: "{{
        hostvars['localhost'].config.cluster_validation.gluster_pod }}"
  - block:
    - import_role:
        name: validate-system
      vars:
        pod_name: ""
        packages: "{{ validation_config.packages }}"
        validate_package_signatures: "{{
          validation_config.validate_package_signatures }}"
        redhat_storage_release: "{{validation_config.redhat_storage_release }}"
        redhat_release: "{{ validation_config.redhat_release }}"
    - name: Save results to a var on the master node
      delegate_to: "{{ groups.dt_masters | first }}"
      delegate_facts: yes
      set_fact:
        dt_gluster_nodes_mismatches: "{{
          dt_gluster_nodes_mismatches | default({}) | combine({
            ansible_hostname: dt_mismatches
          })
        }}"
      when: "dt_mismatches != {}"
    when:
    - "hostvars['localhost'].standalone_gluster | bool"
    - "not (hostvars['localhost'].config.cluster_validation.skip|bool)"

- hosts: dt_masters
  run_once: yes
  gather_facts: no
  pre_tasks:
  - setup:
      filter: ansible_hostname
  tasks:
  - set_fact:
      heketi_validation_config: "{{
        hostvars['localhost'].config.cluster_validation.heketi_pod }}"
      gluster_validation_config: "{{
        hostvars['localhost'].config.cluster_validation.gluster_pod }}"
      block_prov_validation_config: "{{
        hostvars['localhost'].config.cluster_validation.gluster_block_provisioner_pod }}"
  # Heketi POD
  - name: Get heketi PODs
    shell: "oc get pods --all-namespaces -l heketi
      -o=custom-columns=:.metadata.name,:.metadata.namespace"
    register: heketi_pods
  - block:
    - import_role:
        name: validate-system
      vars:
        pod_name: "{{ (heketi_pods.stdout_lines[1].split(' ') | list)[0] }}"
        pod_namespace: "{{ (heketi_pods.stdout_lines[1].split(' ') | list)[-1] }}"
        packages: "{{ heketi_validation_config.packages }}"
        validate_package_signatures: "{{
          heketi_validation_config.validate_package_signatures }}"
        redhat_storage_release: "{{
          heketi_validation_config.redhat_storage_release }}"
        redhat_release: "{{ heketi_validation_config.redhat_release }}"
    - set_fact:
        dt_heketi_mismatches: "{{ dt_mismatches }}"
    when:
    - "((heketi_pods.stdout_lines | join('')).strip() | length) > 0"
    - "not (hostvars['localhost'].config.cluster_validation.skip|bool)"

  # Gluster block provisioner POD
  - name: Get gluster block provisioner PODs
    shell: "oc get pods --no-headers
      -l deploymentconfig=$(oc get dc --no-headers -l glusterblock
        -o custom-columns=:.metadata.name)
      -o=custom-columns=:.metadata.name,:.metadata.namespace"
    register: block_prov_pods
  - block:
    - import_role:
        name: validate-system
      vars:
        pod_name: "{{ (block_prov_pods.stdout_lines[0].split(' ') | list)[0] }}"
        pod_namespace: "{{
          (block_prov_pods.stdout_lines[0].split(' ') | list)[-1] }}"
        packages: "{{ block_prov_validation_config.packages }}"
        validate_package_signatures: "{{
          block_prov_validation_config.validate_package_signatures }}"
        redhat_storage_release: "{{
          block_prov_validation_config.redhat_storage_release }}"
        redhat_release: "{{ block_prov_validation_config.redhat_release }}"
    - set_fact:
        dt_block_prov_mismatches: "{{ dt_mismatches }}"
    when:
    - "((block_prov_pods.stdout_lines | join('')).strip() | length) > 0"
    - "not (hostvars['localhost'].config.cluster_validation.skip|bool)"

  # Gluster PODs
  - name: Get list of Gluster PODs
    shell: "oc get pods --all-namespaces --no-headers -l glusterfs-node
      -o=custom-columns=:.metadata.name,:.metadata.namespace"
    register: gluster_pods
  - block:
    - include_role:
        name: validate-system
      vars:
        varname_with_results: "dt_mismatches_{{
          ((item.split(' ') | list)[0]).replace('-', '_') }}"
        pod_name: "{{ (item.split(' ') | list)[0] }}"
        pod_namespace: "{{ (item.split(' ') | list)[-1] }}"
        packages: "{{ gluster_validation_config.packages }}"
        validate_package_signatures: "{{
          gluster_validation_config.validate_package_signatures }}"
        redhat_storage_release: "{{
          gluster_validation_config.redhat_storage_release }}"
        redhat_release: "{{ gluster_validation_config.redhat_release }}"
      with_items: "{{ gluster_pods.stdout_lines }}"
    - set_fact:
        dt_gluster_mismatches: "{{ dt_gluster_mismatches|default({}) |combine({
          ('dt_mismatches_' + (item.split(' ')|list)[0]): (
            hostvars[ansible_hostname].get(
              ('dt_mismatches_' + (item.split(' ')|list)[0].replace('-', '_')))
          )
        }) }}"
      with_items: "{{ gluster_pods.stdout_lines }}"
      when: "hostvars[ansible_hostname].get(
        'dt_mismatches_' +
        (item.split(' ')|list)[0].replace('-', '_'), {}) != {}"
    when:
    - "((gluster_pods.stdout_lines | join('')).strip() | length) > 0"
    - "not (hostvars['localhost'].config.cluster_validation.skip|bool)"
  - name: VALIDATION. Validate results for every node and POD
    fail:
      msg: '{{ {
        "Following mismatches are found": (
          dt_gluster_nodes_mismatches|default({})) | combine({
            "heketi_pod": dt_heketi_mismatches,
            "gluster_block_provisioner_pod": dt_block_prov_mismatches,
            "gluster_pods": dt_gluster_mismatches,
        })
      } }}'
    when:
    - "(dt_gluster_nodes_mismatches|default({}) != {}) or
       (dt_heketi_mismatches|default({}) != {}) or
       (dt_block_prov_mismatches|default({}) != {}) or
       (dt_gluster_mismatches|default({}) != {})"
    - "not (hostvars['localhost'].config.cluster_validation.skip|bool)"
